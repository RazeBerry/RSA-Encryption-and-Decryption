#include <iostream>
#include <cmath>
#include <chrono>
using namespace std;

int mul_inv(long long a, long long b)
{
    
    long long b0 = b, t, q;
    long long x0 = 0, x1 = 1;
    if (b == 1) return 1;
    while (a > 1) {
        q = a / b;
        t = b, b = a % b, a = t;
        t = x0, x0 = x1 - q * x0, x1 = t;
    }
    if (x1 < 0) x1 += b0;
    return x1;
}

long long prime(long long p, long long q)
{
	return p*q;
}

long long GCD(long long a, long long b)
{
	long long c;
	while(b)
    {
		c = a;
		a = b;
		b = c%b;
	}
	return a;
}

long long ab(long long p, long long q)
{
	long long a = p-1;
	long long b = q-1;
	long long c = a*b;
	return c;
}

long long mod_pow(unsigned num, unsigned _pow, unsigned mod)
{
	unsigned ret = 1;
	for(; _pow; _pow >>= 1)
	{
		if (_pow & 1)
			ret = (1ll*ret*num) % mod;
		num = (1ll*num*num) % mod;
	}

	return ret;
}

int main()
{
	high_resolution_clock::time_point t1 = high_resolution_clock::now();
	long long e = 107712961; //define randon prime number
	long long n = prime(179423291,179423771); //enter your first and second prime
	long long LCM = ab(179423291,179423771)/GCD(179423291,179423771); ////enter your first and second prime
	long long num_mul = mul_inv(e,LCM);
	long long plaintext = 8512125;
	high_resolution_clock::time_point t2 = high_resolution_clock::now();
	duration<double> time_span = duration_cast<duration<double>>(t2 - t1);
	cout << "The greatest common divisor is " << GCD(179423291,179423771) << endl;
	cout << "The modular inverse is " << num_mul << endl;
	cout << "The multiple of prime numbers is " << n << endl;
	cout << "The least common multiple of totient is " << LCM << endl;
	cout << "The encrypted text is " << mod_pow(plaintext, e, n);
	<< "It took me " << time_span.count() << " seconds.";
}
